# Load the cc_proto_library rule if your setup requires it.
# This is typically required for older versions or specific setups.
# load("//:python_toolchain.bzl", "python_toolchain")

# python_toolchain(
#     name = "my_python_toolchain",
#     python_interpreter_path = "/usr/bin/python3",  # Adjust this path as necessary
# )


cc_binary(
    name = "send_data",
    srcs = ["src/targets/struct_serialize.cpp"],
    deps = [
        ":state_field_registry_cc_proto",
        # Depending on your setup, you might need to specify protobuf dependencies here.
        # For example, "@com_google_protobuf//:protobuf",
    ],
    # You may not need the copts line depending on your setup and how the protobuf headers are included.
    # copts = ["-Iexternal/com_google_protobuf/src"],
)

cc_binary(
    name = "air_proto_writer",
    srcs = ["src/targets/air_proto_writer.cpp"],
    deps = [
        "//include/protos:state_field_registry_cc_proto",
        "//src/air_proto:air_proto"
    ],
)

cc_binary(
    name = "air_nano_proto_writer",
    srcs = ["src/targets/air_nano_proto_writer.cpp"],
    deps = [
        # ":state_field_registry_cc_proto",
        "//include/nanopb:nanopb_airproto_sfr",
        "//src/air_nano_proto:air_nano_proto"
    ],
)


# load(
#     "@platformio_rules//platformio:platformio.bzl",
#     "platformio_library",
#     "platformio_project",
# )

# platformio_project(
#     name = "binary_counter",
#     src = "binary_counter.cc",
#     board = "megaatmega2560",
#     framework = "arduino",
#     platform = "atmelavr",
#     deps = [
#         ":Convert",
#     ],
#     # If you need to you can pass multiple string key-value pairs directly
#     # to PlatformIO. All of these will appear under the environment section in
#     # the generated platformio.ini file. That would be "[env:megaatmega2560]" in
#     # this example. For the available options see:
#     # http://docs.platformio.org/en/stable/projectconf.html
#     environment_kwargs = {
#         "board_f_cpu": "16000000L",
#     }
# )